// Populate the sidebar
//
// This is a script, and not included directly in the page, to control the total size of the book.
// The TOC contains an entry for each page, so if each page includes a copy of the TOC,
// the total size of the page becomes O(n**2).
class MDBookSidebarScrollbox extends HTMLElement {
    constructor() {
        super();
    }
    connectedCallback() {
        this.innerHTML = '<ol class="chapter"><li class="chapter-item expanded affix "><a href="about.html">How-to</a></li><li class="chapter-item expanded affix "><a href="leanring_anything_in_swe.html">start learning in swe</a></li><li class="chapter-item expanded affix "><a href="design_code_via_ownership.html">design code via ownership</a></li><li class="chapter-item expanded affix "><a href="decorator_with_lambda.html">create decorators with lambda</a></li><li class="chapter-item expanded affix "><a href="create_tuple_in_multiple_ways.html">create tuple in different ways</a></li><li class="chapter-item expanded affix "><a href="capture_this_by_value.html">capture this pointer by value</a></li><li class="chapter-item expanded affix "><a href="init_fields_with_function_calls.html">initialize fields with functions</a></li><li class="chapter-item expanded affix "><a href="singleton_pattern_in_multiple_ways.html">define singleton pattern in multiple ways</a></li><li class="chapter-item expanded affix "><a href="static_local_variables.html">define static local variables</a></li><li class="chapter-item expanded affix "><a href="forward_to_assign_fields.html">use std::forward to assign moved fields</a></li><li class="chapter-item expanded affix "><a href="variadic_inheritance.html">create variadic inheritance</a></li><li class="chapter-item expanded affix "><a href="creating_callables.html">create callables</a></li><li class="chapter-item expanded affix "><a href="creating_package_task.html">create a packaged_task</a></li><li class="chapter-item expanded affix "><a href="specialized_template_functions.html">define specialized template functions</a></li><li class="chapter-item expanded affix "><a href="specialized_template_classes.html">define specialized template classes</a></li><li class="chapter-item expanded affix "><a href="specialized_template_methods.html">define specialized template methods</a></li><li class="chapter-item expanded affix "><a href="strlen_and_sizeof.html">use strlen and sizeof with bytes</a></li><li class="chapter-item expanded affix "><a href="mixin.html">define mixins</a></li><li class="chapter-item expanded affix "><a href="policy_based_design.html">define policy based design</a></li><li class="chapter-item expanded affix "><a href="meta_programming_types.html">use meta programming to work with types</a></li><li class="chapter-item expanded affix "><a href="config_class.html">create config class</a></li><li class="chapter-item expanded affix "><a href="conditional.html">use std::conditional</a></li><li class="chapter-item expanded affix "><a href="abstract_template_class.html">abstract template class</a></li><li class="chapter-item expanded affix "><a href="fold_expansions.html">define fold expansions</a></li><li class="chapter-item expanded affix "><a href="template_variable.html">define template variable</a></li><li class="chapter-item expanded affix "><a href="using_rvalue_correctly.html">use rvalues correctly</a></li><li class="chapter-item expanded affix "><a href="using_condition_variable.html">use condition variable</a></li><li class="chapter-item expanded affix "><a href="lock_free_solution.html">create lock-free solutions</a></li><li class="chapter-item expanded affix "><a href="atomics_with_memory_orders.html">use memory orderings with atomics</a></li><li class="chapter-item expanded affix "><a href="constexpr_literal_type.html">create constexpr literal type</a></li><li class="chapter-item expanded affix "><a href="multi_layered_template_types.html">create multi layered template types</a></li><li class="chapter-item expanded affix "><a href="raw_pointers.html">use raw pointers correctly</a></li><li class="chapter-item expanded affix "><a href="memory_mapped_address.html">define memory mapped address</a></li><li class="chapter-item expanded affix "><a href="sizeof_cstyle_array.html">get size of a c-style array</a></li><li class="chapter-item expanded affix "><a href="using_atomic_flag.html">use atomic_flag</a></li><li class="chapter-item expanded affix "><a href="use_static_correctly.html">use static correctly</a></li><li class="chapter-item expanded affix "><a href="use_semaphore_to_sync.html">use semaphore to sync threads</a></li><li class="chapter-item expanded affix "><a href="partial_specialization_with_sfinae.html">use partial specialization with sfinae</a></li><li class="chapter-item expanded affix "><a href="partial_specialization_with_concepts.html">use partial specialization with concepts</a></li><li class="chapter-item expanded affix "><a href="define_and_use_concepts.html">define and use concepts</a></li><li class="chapter-item expanded affix "><a href="jthread_with_stop_token.html">use jthread with stop_token</a></li><li class="chapter-item expanded affix "><a href="promise_with_async.html">use promise</a></li><li class="chapter-item expanded affix "><a href="deferred_and_adapt_lock.html">use deferred and adapted locking</a></li><li class="chapter-item expanded affix "><a href="template_aliasing.html">use template aliasing</a></li><li class="chapter-item expanded affix "><a href="use_spaceship_operator_with_data.html">use spaceship operator with data type</a></li><li class="chapter-item expanded affix "><a href="is_and_has_relationships.html">define is and has relationships</a></li><li class="chapter-item expanded affix "><a href="value_type.html">define a value type</a></li><li class="chapter-item expanded affix "><a href="stateful_functions.html">define a stateful function</a></li><li class="chapter-item expanded affix "><a href="friendship_rules.html">use friendship</a></li><li class="chapter-item expanded affix "><a href="equal_range_to_subrange.html">use equal_range to get sub-range</a></li><li class="chapter-item expanded affix "><a href="if_constexpr.html">use if constexpr</a></li><li class="chapter-item expanded affix "><a href="if_consteval.html">use if consteval</a></li><li class="chapter-item expanded affix "><a href="sync_thread_with_barrier_and_latch.html">sync threads with barrier and latch</a></li><li class="chapter-item expanded affix "><a href="attributes.html">use attributes</a></li><li class="chapter-item expanded affix "><a href="variadic_templates.html">use variadic templates</a></li><li class="chapter-item expanded affix "><a href="constexpr.html">use constexpr</a></li><li class="chapter-item expanded affix "><a href="placement_new.html">use placement new</a></li><li class="chapter-item expanded affix "><a href="custom_new_and_delete.html">define custom new and delete for type</a></li><li class="chapter-item expanded affix "><a href="template_header_as_func_call.html">use template header like function call</a></li><li class="chapter-item expanded affix "><a href="using_typeid.html">use typeid</a></li><li class="chapter-item expanded affix "><a href="hide_definition_from_user.html">hide definition/typelogic from users</a></li><li class="chapter-item expanded affix "><a href="pimpl_idiom.html">define pimpl idiom</a></li><li class="chapter-item expanded affix "><a href="crtp_pattern.html">define crtp pattern</a></li><li class="chapter-item expanded affix "><a href="static_polymorphism.html">use static polymorphism</a></li><li class="chapter-item expanded affix "><a href="dynamic_polymorphism.html">use dynamic polymorphism</a></li><li class="chapter-item expanded affix "><a href="protect_inner_type.html">protect inner type in inheritance</a></li><li class="chapter-item expanded affix "><a href="c_memory_methods.html">use c memory methods</a></li><li class="chapter-item expanded affix "><a href="template_type_in_templates.html">use template type in templates</a></li><li class="chapter-item expanded affix "><a href="using_unions.html">use union</a></li><li class="chapter-item expanded affix "><a href="nested_namespaces.html">use namespaces</a></li><li class="chapter-item expanded affix "><a href="addressof.html">use addressof</a></li><li class="chapter-item expanded affix "><a href="custom_type_using_enums.html">define custom types using enums</a></li><li class="chapter-item expanded affix "><a href="integer_sequence.html">use std::integer_sequence and std::index_sequence</a></li><li class="chapter-item expanded affix "><a href="casting_shared_ptr.html">cast std::shared_ptrs</a></li><li class="chapter-item expanded affix "><a href="double_deletion_with_sp.html">create double deletion with shared_ptr</a></li><li class="chapter-item expanded affix "><a href="streambuf_iterator.html">use streambuf iterator</a></li><li class="chapter-item expanded affix "><a href="std_streams.html">use std streams</a></li><li class="chapter-item expanded affix "><a href="iterator_adaptors.html">use iterator adaptors</a></li><li class="chapter-item expanded affix "><a href="compare_iterator_with_reverse.html">compare iterator with reverse iterator</a></li><li class="chapter-item expanded affix "><a href="function_negator.html">use function negator</a></li><li class="chapter-item expanded affix "><a href="splitting_string.html">split a string with different methods</a></li><li class="chapter-item expanded affix "><a href="function_pointer.html">use function pointers</a></li><li class="chapter-item expanded affix "><a href="special_pointers.html">use special pointer types</a></li><li class="chapter-item expanded affix "><a href="static_factory_method.html">use static factory method</a></li><li class="chapter-item expanded affix "><a href="casting.html">use castings</a></li><li class="chapter-item expanded affix "><a href="casting_correctly.html">use casting correctly</a></li><li class="chapter-item expanded affix "><a href="virtual_inheritance.html">use virtual inheritance</a></li><li class="chapter-item expanded affix "><a href="associative_containers.html">use associative containers</a></li><li class="chapter-item expanded affix "><a href="mutex_for_critical_section.html">use mutex</a></li><li class="chapter-item expanded affix "><a href="generate_data.html">generate data</a></li><li class="chapter-item expanded affix "><a href="forwarding_references.html">use forwarding references correctly</a></li><li class="chapter-item expanded affix "><a href="defining_pure_virtual_method.html">define the pure virtual method in base class</a></li><li class="chapter-item expanded affix "><a href="late_and_early_binding.html">use late and early binding</a></li><li class="chapter-item expanded affix "><a href="member_field_init_correctly.html">use member field initialization correctly</a></li><li class="chapter-item expanded affix "><a href="access_unaccessible_base_element.html">access unaccessible base elements</a></li><li class="chapter-item expanded affix "><a href="skip_name_hiding.html">use using declarations to skip name hidings</a></li><li class="chapter-item expanded affix "><a href="using_delegations.html">use using deceleration to borrow</a></li><li class="chapter-item expanded affix "><a href="nested_classes.html">use nested classes</a></li><li class="chapter-item expanded affix "><a href="lower_bound_upper_bound.html">use lower_bound and upper_bound</a></li><li class="chapter-item expanded affix "><a href="enum_with_operators.html">use operator| with enums</a></li><li class="chapter-item expanded affix "><a href="explicit.html">use explicit</a></li><li class="chapter-item expanded affix "><a href="conditional_noexcept.html">use conditional noexcept</a></li><li class="chapter-item expanded affix "><a href="copy_ellision_rvo.html">use copy elision and rvo</a></li><li class="chapter-item expanded affix "><a href="stack_buffer_with_new_delete.html">use stack buffer with custom new/delete</a></li><li class="chapter-item expanded affix "><a href="new_delete_no_ctor_dtor.html">use new/delete without ctor/dtor</a></li><li class="chapter-item expanded affix "><a href="init_enum_with_constexpr.html">initialize enum values with constexpr</a></li><li class="chapter-item expanded affix "><a href="true_constants.html">use true constants</a></li><li class="chapter-item expanded affix "><a href="aggregate_type.html">define aggregate types</a></li><li class="chapter-item expanded affix "><a href="enable_exceptions_for_io.html">enable exceptions for io</a></li><li class="chapter-item expanded affix "><a href="nvi_idiom.html">define non-virtual interface idiom</a></li><li class="chapter-item expanded affix "><a href="bit_fields.html">use bit fields</a></li><li class="chapter-item expanded affix "><a href="conversion_operators.html">define conversion operators</a></li><li class="chapter-item expanded affix "><a href="binary_enums.html">define binary enums</a></li><li class="chapter-item expanded affix "><a href="ref_to_pointer_cmp.html">compare ref to pointer</a></li><li class="chapter-item expanded affix "><a href="ref_to_local_var_of_func.html">return ref to local variable of function</a></li><li class="chapter-item expanded affix "><a href="guards_for_functions_and_classes.html">define guards for functions and classes</a></li><li class="chapter-item expanded affix "><a href="enable_if.html">use std::enable_if</a></li><li class="chapter-item expanded affix "><a href="shareable_only_type.html">create shareable only type</a></li><li class="chapter-item expanded affix "><a href="pass_pointer_to_func_by_ref.html">pass pointer by ref to functions</a></li><li class="chapter-item expanded affix "><a href="forward_declaration.html">use forward declarations correctly</a></li><li class="chapter-item expanded affix "><a href="inline_correctly.html">use inline correctly</a></li><li class="chapter-item expanded affix "><a href="linkage.html">use linkages correctly</a></li><li class="chapter-item expanded affix "><a href="string_string_view_methods.html">use string and string_view methods</a></li><li class="chapter-item expanded affix "><a href="initialization_clause.html">use initialization clauses</a></li><li class="chapter-item expanded affix "><a href="raw_string.html">use raw strings</a></li><li class="chapter-item expanded affix "><a href="auto.html">use auto</a></li><li class="chapter-item expanded affix "><a href="designated_initialization.html">use designated initialization</a></li><li class="chapter-item expanded affix "><a href="non_virtual_inheritance.html">use non-virtual inheritance</a></li><li class="chapter-item expanded affix "><a href="evaluate_const.html">evaluate constness</a></li><li class="chapter-item expanded affix "><a href="ranged_enum.html">defined ranged enum</a></li><li class="chapter-item expanded affix "><a href="meta_functions.html">define meta functions</a></li><li class="chapter-item expanded affix "><a href="spanstream.html">use spanstream</a></li><li class="chapter-item expanded affix "><a href="disjunct_conjunct_negate.html">use disjunction, conjunction, negation</a></li><li class="chapter-item expanded affix "><a href="c_variadics.html">use c variadics</a></li><li class="chapter-item expanded affix "><a href="registry_pattern.html">implement registry pattern</a></li><li class="chapter-item expanded affix "><a href="macros.html">use macros</a></li><li class="chapter-item expanded affix "><a href="void_t.html">use void_t</a></li><li class="chapter-item expanded affix "><a href="anonymous_struct_and_union.html">use anonymous struct and union</a></li><li class="chapter-item expanded affix "><a href="atomic_shared_ptr.html">use atomic std::shared_ptr</a></li><li class="chapter-item expanded affix "><a href="three_way_comparision.html">use three-way comparison</a></li><li class="chapter-item expanded affix "><a href="template_var_as_meta_func.html">use template vars like meta-functions</a></li><li class="chapter-item expanded affix "><a href="views_from_ranges_lib.html">use range::views adaptors</a></li><li class="chapter-item expanded affix "><a href="extern.html">use extern keyword</a></li><li class="chapter-item expanded affix "><a href="from_chars_and_to_chars.html">use from_chars and to_chars</a></li><li class="chapter-item expanded affix "><a href="expected.html">use std::expected</a></li><li class="chapter-item expanded affix "><a href="ranges_algorithms_with_views.html">use ranges-lib constrained algorithms</a></li><li class="chapter-item expanded affix "><a href="monadic_ops_with_optinal.html">use monadic operations with optional</a></li><li class="chapter-item expanded affix "><a href="advanced_template_features.html">use advanced template solutions</a></li><li class="chapter-item expanded affix "><a href="using_decltype_and_declval.html">use decltype and declval</a></li><li class="chapter-item expanded affix "><a href="std_ref_and_cref.html">use std::ref and std::cref</a></li><li class="chapter-item expanded affix "><a href="perfect_forwarding_and_return.html">use perfect forwarding and return</a></li><li class="chapter-item expanded affix "><a href="using_thread_locals.html">use thread locals</a></li><li class="chapter-item expanded affix "><a href="std_functors.html">use std functors</a></li><li class="chapter-item expanded affix "><a href="err_codes.html">use error codes</a></li><li class="chapter-item expanded affix "><a href="smart_pointers.html">use smart pointers</a></li><li class="chapter-item expanded affix "><a href="padding_and_alignment.html">use padding and alignments</a></li><li class="chapter-item expanded affix "><a href="multi_byte_to_wide.html">convert multi-byte to wide</a></li><li class="chapter-item expanded affix "><a href="file_with_iterator.html">read and write file with iterators</a></li><li class="chapter-item expanded affix "><a href="projectsion_in_ranges.html">use projection in ranges</a></li><li class="chapter-item expanded affix "><a href="regular_expressions.html">use regular expressions</a></li><li class="chapter-item expanded affix "><a href="apply_invoke_r.html">use std::apply, std::invoke and std::invoke_r</a></li><li class="chapter-item expanded affix "><a href="std_distributions_data.html">use std distributions to generate data</a></li><li class="chapter-item expanded affix "><a href="bitwise_ops.html">use bitwise operations</a></li><li class="chapter-item expanded affix "><a href="pmr_with_stack_mem.html">use pmr with stack memory</a></li><li class="chapter-item expanded affix "><a href="uninitialized_memory.html">use uninitialized memory methods</a></li><li class="chapter-item expanded affix "><a href="use_std_concepts.html">use std concepts</a></li><li class="chapter-item expanded affix "><a href="vopts_vargs_togeter.html">use VA_OPT and VA_ARGS together</a></li><li class="chapter-item expanded affix "><a href="builder_pattern.html">design builder pattern</a></li><li class="chapter-item expanded affix "><a href="factory_method_pattern.html">design factory method pattern</a></li><li class="chapter-item expanded affix "><a href="composite_pattern.html">design composite pattern</a></li><li class="chapter-item expanded affix "><a href="adapter_pattern.html">design adapter pattern</a></li><li class="chapter-item expanded affix "><a href="command_pattern.html">design command pattern</a></li><li class="chapter-item expanded affix "><a href="state_pattern.html">design state pattern</a></li><li class="chapter-item expanded affix "><a href="mediator_pattern.html">design mediator pattern</a></li><li class="chapter-item expanded affix "><a href="observer_pattern.html">design observer pattern</a></li><li class="chapter-item expanded affix "><a href="strategy_pattern.html">design strategy pattern</a></li><li class="chapter-item expanded affix "><a href="archieve_pattern.html">design archive pattern</a></li></ol>';
        // Set the current, active page, and reveal it if it's hidden
        let current_page = document.location.href.toString().split("#")[0];
        if (current_page.endsWith("/")) {
            current_page += "index.html";
        }
        var links = Array.prototype.slice.call(this.querySelectorAll("a"));
        var l = links.length;
        for (var i = 0; i < l; ++i) {
            var link = links[i];
            var href = link.getAttribute("href");
            if (href && !href.startsWith("#") && !/^(?:[a-z+]+:)?\/\//.test(href)) {
                link.href = path_to_root + href;
            }
            // The "index" page is supposed to alias the first chapter in the book.
            if (link.href === current_page || (i === 0 && path_to_root === "" && current_page.endsWith("/index.html"))) {
                link.classList.add("active");
                var parent = link.parentElement;
                if (parent && parent.classList.contains("chapter-item")) {
                    parent.classList.add("expanded");
                }
                while (parent) {
                    if (parent.tagName === "LI" && parent.previousElementSibling) {
                        if (parent.previousElementSibling.classList.contains("chapter-item")) {
                            parent.previousElementSibling.classList.add("expanded");
                        }
                    }
                    parent = parent.parentElement;
                }
            }
        }
        // Track and set sidebar scroll position
        this.addEventListener('click', function(e) {
            if (e.target.tagName === 'A') {
                sessionStorage.setItem('sidebar-scroll', this.scrollTop);
            }
        }, { passive: true });
        var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');
        sessionStorage.removeItem('sidebar-scroll');
        if (sidebarScrollTop) {
            // preserve sidebar scroll position when navigating via links within sidebar
            this.scrollTop = sidebarScrollTop;
        } else {
            // scroll sidebar to current active section when navigating via "next/previous chapter" buttons
            var activeSection = document.querySelector('#sidebar .active');
            if (activeSection) {
                activeSection.scrollIntoView({ block: 'center' });
            }
        }
        // Toggle buttons
        var sidebarAnchorToggles = document.querySelectorAll('#sidebar a.toggle');
        function toggleSection(ev) {
            ev.currentTarget.parentElement.classList.toggle('expanded');
        }
        Array.from(sidebarAnchorToggles).forEach(function (el) {
            el.addEventListener('click', toggleSection);
        });
    }
}
window.customElements.define("mdbook-sidebar-scrollbox", MDBookSidebarScrollbox);
